package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"waza/utils"
)

// GetUserByID is the resolver for the getUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*User, error) {
	out, err := r.UserService.GetUserById(ctx, id)
	if err != nil {
		return nil, err
	}

	var user User
	_ = utils.UnPack(out, &user)
	return &user, nil
}

// GetUserByEmail is the resolver for the getUserByEmail field.
func (r *queryResolver) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	out, err := r.UserService.GetUserByEmail(ctx, email)
	if err != nil {
		return nil, err
	}

	var user User
	_ = utils.UnPack(out, &user)
	return &user, nil
}

// GetUserByPhone is the resolver for the getUserByPhone field.
func (r *queryResolver) GetUserByPhone(ctx context.Context, phone string) (*User, error) {
	out, err := r.UserService.GetUserByPhone(ctx, phone)
	if err != nil {
		return nil, err
	}

	var user User
	_ = utils.UnPack(out, &user)
	return &user, nil
}

// GetAccountByID is the resolver for the getAccountById field.
func (r *queryResolver) GetAccountByID(ctx context.Context, id string) (*Account, error) {
	out, err := r.AccountService.GetAccountById(ctx, id)
	if err != nil {
		return nil, err
	}

	var account Account
	_ = utils.UnPack(out, &account)
	return &account, nil
}

// GetAccountByOwnerID is the resolver for the getAccountByOwnerId field.
func (r *queryResolver) GetAccountByOwnerID(ctx context.Context, ownerID string) (*Account, error) {
	out, err := r.AccountService.GetAccountByOwnerId(ctx, ownerID)
	if err != nil {
		return nil, err
	}

	var account Account
	_ = utils.UnPack(out, &account)
	return &account, nil
}

// GetTransactionHistory is the resolver for the getTransactionHistory field.
func (r *queryResolver) GetTransactionHistory(ctx context.Context, accountID string) ([]*Transaction, error) {
	out, err := r.TransactionService.ListTransactionHistory(ctx, accountID)
	if err != nil {
		return nil, err
	}

	var transactions []*Transaction
	_ = utils.UnPack(out, &transactions)
	return transactions, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
